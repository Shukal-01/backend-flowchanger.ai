generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

// model Department {
//   id              String @id @default(uuid())
//   department_name String
// }
model AttendanceAutomationRule {
  id                  String   @id @default(uuid())
  auto_absent         Boolean  @default(false)
  present_on_punch    Boolean  @default(false)
  auto_half_day       String?
  manadatory_half_day String?
  manadatory_full_day String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  staffId             String   @unique
  staff               Staff    @relation(fields: [staffId], references: [id])
}

model AttendanceMode {
  id                        String             @id @default(uuid())
  selfie_attendance         Boolean            @default(false)
  qr_attendance             Boolean            @default(false)
  gps_attendance            Boolean            @default(false)
  mark_attendance           MarkAttendenceType @default(Office)
  allow_punch_in_for_mobile Boolean            @default(false) // Allows punch-in from mobile devices
  created_at                DateTime           @default(now())
  updated_at                DateTime           @updatedAt
  staffId                   String             @unique
  staff                     Staff              @relation(fields: [staffId], references: [id])
}

enum MarkAttendenceType {
  Office
  Anywhere
}

model Staff {
  id                       String                       @id @default(uuid())
  name                     String
  job_title                String
  branch                   String
  departmentId             Int
  roleId                   Int
  mobile                   String
  login_otp                String
  gender                   String
  official_email           String
  date_of_joining          DateTime
  address                  String
  BankDetails              BankDetails[]
  panaltyOvertimeDetailId  PanaltyOvertimeDetails?
  attendanceAutomationRule AttendanceAutomationRule?
  AttendenceMode           AttendanceMode?
  staff_bg_verification    StaffBackgroundVerification?
}

model StaffBackgroundVerification {
  id                          Int      @id @default(autoincrement())
  aadhaar_number              String?
  aadhaar_verification_status String?  @default("Not Verified")
  aadhaar_file                String?
  pan_number                  String?
  pan_verification_status     String?  @default("Not Verified")
  pan_file                    String?
  uan_number                  String?
  uan_verification_status     String?  @default("Not Verified")
  uan_file                    String?
  driving_license_number      String?
  driving_license_status      String?  @default("Not Verified")
  driving_license_file        String?
  face_file                   String?
  face_verification_status    String?  @default("Not Verified")
  current_address             String?
  permanent_address           String?
  address_status              String?  @default("Not Verified")
  address_file                String?
  staff                       Staff?   @relation(fields: [staffId], references: [id])
  staffId                     String?  @unique
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

model BankDetails {
  id                  String   @id @default(uuid())
  staffId             String   @unique
  bank_name           String
  account_number      String   @unique
  account_holder_name String
  branch_name         String
  ifsc_code           String
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  staff               Staff    @relation(fields: [staffId], references: [id])
}

model PanaltyOvertimeDetails {
  id      String @id @default(uuid())
  staffId String @unique

  earlyLeavePolicy EarlyLeavePolicy?
  lateComingPolicy LateComingPolicy?
  overtimePolicy   OvertimePolicy?

  staff Staff? @relation(fields: [staffId], references: [id])
}

enum FineType {
  HOURLY
  DAILY
}

model EarlyLeavePolicy {
  id              String   @id @default(uuid())
  fineType        FineType @default(HOURLY)
  gracePeriodMins Int
  fineAmountMins  Int
  waiveOffDays    Int

  panaltyOvertimeDetail   PanaltyOvertimeDetails? @relation(fields: [panaltyOvertimeDetailId], references: [id])
  panaltyOvertimeDetailId String?                 @unique
}

model LateComingPolicy {
  id              String   @id @default(uuid())
  fineType        FineType @default(HOURLY)
  gracePeriodMins Int
  fineAmountMins  Int
  waiveOffDays    Int

  panaltyOvertimeDetail   PanaltyOvertimeDetails? @relation(fields: [panaltyOvertimeDetailId], references: [id])
  panaltyOvertimeDetailId String?                 @unique
}

model OvertimePolicy {
  id               String @id @default(uuid())
  gracePeriodMins  Int
  extraHoursPay    Int
  publicHolidayPay Int
  weekOffPay       Int

  panaltyOvertimeDetail   PanaltyOvertimeDetails? @relation(fields: [panaltyOvertimeDetailId], references: [id])
  panaltyOvertimeDetailId String?                 @unique
}

model Role {
  id          String       @id @default(uuid())
  role_name   String       
  permissions Permissions?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model ClientsPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model ProjectsPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model ReportPermissions {
  id               String       @id @default(uuid())
  view_global      Boolean      @default(false)
  view_time_sheets Boolean      @default(false)
  Permissions      Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId    String?      @unique
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
}

model StaffRolePermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model SettingsPermissions {
  id               String       @id @default(uuid())
  view_global      Boolean      @default(false)
  view_time_sheets Boolean      @default(false)
  Permissions      Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId    String?      @unique
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
}

model StaffPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model TaskPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model SubTaskPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model ChatModulePermissions {
  id            String       @id @default(uuid())
  grant_access  Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model AIPermissions {
  id            String       @id @default(uuid())
  grant_access  Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model Permissions {
  id                      String                 @id @default(uuid())
  clients_permissions     ClientsPermissions?
  projects_permissions    ProjectsPermissions?
  report_permissions      ReportPermissions?
  staff_role_permissions  StaffRolePermissions?
  settings_permissions    SettingsPermissions?
  staff_permissions       StaffPermissions?
  task_permissions        TaskPermissions?
  sub_task_permissions    SubTaskPermissions?
  chat_module_permissions ChatModulePermissions?
  ai_permissions          AIPermissions?
  roleId                  String?                @unique
  Role                    Role?                  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  created_at              DateTime               @default(now())
  updated_at              DateTime               @updatedAt
}
