generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  email        String    @unique
  password     String?
  name         String?
  mobile       String?
  role         UserRole  @default(STAFF)
  is_verified  Boolean   @default(false)
  otp          Int?
  otpExpiresAt DateTime?

  messages      Message[]      @relation("UserMessages")
  rooms         ChatRoom[]     @relation("UserRooms")
  clientDetails ClientDetails?
  adminDetails  AdminDetails?
  staffDetails  StaffDetails?
}

model WorkEntry {
  id             String       @id @default(uuid())
  work_name      String
  units          String
  description    String
  attachments    String?
  location       String?
  staffDetailsId String
  createdAt      DateTime     @default(now())
  StaffDetails   StaffDetails @relation(fields: [staffDetailsId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  STAFF
  CLIENT
}

model ChatRoom {
  id      String  @id @default(dbgenerated("gen_random_uuid()"))
  name    String?
  isGroup Boolean @default(false)

  createdAt DateTime  @default(now())
  messages  Message[] @relation("RoomMessages")
  users     User[]    @relation("UserRooms")
}

model Message {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  content   String
  timestamp DateTime @default(now())

  sender   User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId String
  room     ChatRoom @relation("RoomMessages", fields: [roomId], references: [id])
  roomId   String
}

model AdminDetails {
  id            String  @id @default(dbgenerated("gen_random_uuid()"))
  userId        String  @unique
  package_id    String?
  company_name  String?
  company_logo  String?
  profile_image String?
  time_format   String?
  time_zone     String?
  date_format   String?
  week_format   String?

  user User @relation(fields: [userId], references: [id])
}

model StaffDetails {
  id                         String    @id @default(dbgenerated("gen_random_uuid()"))
  userId                     String    @unique
  job_title                  String?
  branch                     String?
  departmentId               String?
  roleId                     String?
  login_otp                  String?
  gender                     String?
  official_email             String?
  date_of_joining            DateTime? @default(now())
  date_of_birth              DateTime? @default(now())
  current_address            String?
  permanent_address          String?
  emergency_contact_name     String?
  emergency_contact_mobile   String?
  emergency_contact_relation String?
  emergency_contact_address  String?
  guardian_name              String?
  status                     String?
  employment                 String?
  marital_status             String?
  blood_group                String?

  // relations
  department               Department?                  @relation(fields: [departmentId], references: [id])
  role                     Role?                        @relation(fields: [roleId], references: [id])
  User                     User                         @relation(fields: [userId], references: [id])
  BankDetails              BankDetails?
  LeavePolicy              LeavePolicy[]
  LeaveBalance             LeaveBalance[]
  LeaveRequest             LeaveRequest[]
  FixedShift               FixedShift[]
  FlexibleShift            FlexibleShift[]
  OverLeavePolicy          OvertimePolicy[]
  EarlyLeavePolicy         EarlyLeavePolicy[]
  LateComingPolicy         LateComingPolicy[]
  SalaryDetails            SalaryDetails[]
  PunchRecords             PunchRecords[]
  attendanceAutomationRule AttendanceAutomationRule?
  AttendenceMode           AttendanceMode?
  staff_bg_verification    StaffBackgroundVerification?
  CustomDetails            CustomDetails[]
  TicketInformation        TicketInformation[]
  UpiDetails               UpiDetails?
  StartBreak               StartBreak[]
  EndBreak                 EndBreak[]
  WorkEntry                WorkEntry[]
  Deduction                Deductions[]
  Earning                  Earnings[]
  TaskDetail               TaskDetail[]                 @relation("staffId")
  projects                 Project[]                    @relation("ProjectStaff")
  TaskStatus               TaskStatus[]                 @relation("staffId")
  past_Employment          PastEmployment?
  Fine                     Fine[]
  Overtime                 Overtime[]
}

enum UserType {
  ADMIN
  STAFF
  CLIENT
}

model Department {
  id              String         @id @default(dbgenerated("gen_random_uuid()"))
  department_name String
  TaskDetail      TaskDetail[]   @relation("departmentId")
  staffs          StaffDetails[]
}

model AttendanceAutomationRule {
  id                  String       @id @default(dbgenerated("gen_random_uuid()"))
  auto_absent         Boolean      @default(false)
  present_on_punch    Boolean      @default(false)
  auto_half_day       String?
  manadatory_half_day String?
  manadatory_full_day String?
  created_at          DateTime     @default(now())
  updated_at          DateTime     @updatedAt
  staffId             String       @unique
  staff               StaffDetails @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model AttendanceMode {
  id                        String             @id @default(dbgenerated("gen_random_uuid()"))
  selfie_attendance         Boolean            @default(false)
  qr_attendance             Boolean            @default(false)
  gps_attendance            Boolean            @default(false)
  mark_attendance           MarkAttendenceType @default(Office)
  allow_punch_in_for_mobile Boolean            @default(false)
  created_at                DateTime           @default(now())
  updated_at                DateTime           @updatedAt
  staffId                   String             @unique
  staff                     StaffDetails       @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

enum MarkAttendenceType {
  Office
  Anywhere
}

enum VerificationStatus {
  VERIFIED
  PENDING
  REJECTED
}

model StaffBackgroundVerification {
  id                           String             @id @default(dbgenerated("gen_random_uuid()"))
  aadhaar_number               String?
  aadhaar_verification_status  VerificationStatus @default(PENDING)
  aadhaar_file                 String?
  voter_id_number              String?
  voter_id_verification_status VerificationStatus @default(PENDING)
  voter_id_file                String?
  pan_number                   String?
  pan_verification_status      VerificationStatus @default(PENDING)
  pan_file                     String?
  uan_number                   String?
  uan_verification_status      VerificationStatus @default(PENDING)
  uan_file                     String?
  driving_license_number       String?
  driving_license_status       VerificationStatus @default(PENDING)
  driving_license_file         String?
  face_file                    String?
  face_verification_status     VerificationStatus @default(PENDING)
  current_address              String?
  permanent_address            String?
  address_status               VerificationStatus @default(PENDING)
  address_file                 String?
  staff                        StaffDetails?      @relation(fields: [staffId], references: [id])
  staffId                      String?            @unique
  createdAt                    DateTime           @default(now())
  updatedAt                    DateTime           @updatedAt
}

model PastEmployment {
  id                     String             @id @default(dbgenerated("gen_random_uuid()"))
  company_name           String
  designation            String?
  joining_date           DateTime           @default(now())
  leaving_date           DateTime           @default(now())
  currency               String?
  salary                 Float?
  company_gst            String?
  past_Employment_status VerificationStatus @default(PENDING)
  staff                  StaffDetails?      @relation(fields: [staffId], references: [id])
  staffId                String?            @unique
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
}

model BankDetails {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  staffId        String   @unique
  bank_name      String?
  account_number String?
  branch_name    String?
  ifsc_code      String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  staff StaffDetails @relation(fields: [staffId], references: [id])
}

model LeavePolicy {
  id                   String    @id @default(dbgenerated("gen_random_uuid()"))
  staffId              String
  name                 String
  allowed_leaves       Int       @default(0)
  carry_forward_leaves Int       @default(0)
  policy_type          LeaveType
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  staff        StaffDetails   @relation(fields: [staffId], references: [id])
  leaveBalance LeaveBalance?
  LeaveRequest LeaveRequest[]
}

enum LeaveType {
  MONTHLY
  YEARLY
}

model LeaveRequest {
  id           String             @id @default(dbgenerated("gen_random_uuid()"))
  staffId      String
  leaveTypeId  String
  request_date DateTime           @default(now())
  start_date   DateTime
  end_date     DateTime
  status       LeaveRequestStatus @default(PENDING)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  staff       StaffDetails @relation(fields: [staffId], references: [id])
  leavePolicy LeavePolicy  @relation(fields: [leaveTypeId], references: [id])
}

model LeaveBalance {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  staffId       String
  leavePolicyId String   @unique
  balance       Int      @default(0)
  used          Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  staff       StaffDetails @relation(fields: [staffId], references: [id])
  leavePolicy LeavePolicy  @relation(fields: [leavePolicyId], references: [id], onDelete: Cascade)
}

enum LeaveRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model CustomDetails {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  staffId     String
  field_name  String
  field_value String
  staff       StaffDetails @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

enum FineType {
  HOURLY
  DAILY
}

model EarlyLeavePolicy {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  fineType        FineType @default(HOURLY)
  gracePeriodMins Int      @default(0)
  fineAmountMins  Int      @default(0)
  waiveOffDays    Int      @default(0)

  staff   StaffDetails? @relation(fields: [staffId], references: [id], onDelete: Cascade)
  staffId String?
}

model LateComingPolicy {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  fineType        FineType @default(HOURLY)
  gracePeriodMins Int      @default(0)
  fineAmountMins  Int      @default(0)
  waiveOffDays    Int      @default(0)

  staff   StaffDetails? @relation(fields: [staffId], references: [id], onDelete: Cascade)
  staffId String?
}

model OvertimePolicy {
  id               String @id @default(dbgenerated("gen_random_uuid()"))
  gracePeriodMins  Int    @default(0)
  extraHoursPay    Int    @default(0)
  publicHolidayPay Int    @default(0)
  weekOffPay       Int    @default(0)

  staff   StaffDetails? @relation(fields: [staffId], references: [id], onDelete: Cascade)
  staffId String?
}

model Role {
  id          String         @id @default(dbgenerated("gen_random_uuid()"))
  role_name   String         @unique
  permissions Permissions?
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  staffs      StaffDetails[]
}

model ClientsPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model ProjectsPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model ReportPermissions {
  id               String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global      Boolean      @default(false)
  view_time_sheets Boolean      @default(false)
  Permissions      Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId    String?      @unique
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
}

model StaffRolePermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model SettingsPermissions {
  id               String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global      Boolean      @default(false)
  view_time_sheets Boolean      @default(false)
  Permissions      Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId    String?      @unique
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
}

model StaffPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model TaskPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model SubTaskPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model ChatModulePermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  grant_access  Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model AIPermissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  grant_access  Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model Permissions {
  id                      String                 @id @default(dbgenerated("gen_random_uuid()"))
  clients_permissions     ClientsPermissions?
  projects_permissions    ProjectsPermissions?
  report_permissions      ReportPermissions?
  staff_role_permissions  StaffRolePermissions?
  settings_permissions    SettingsPermissions?
  staff_permissions       StaffPermissions?
  task_permissions        TaskPermissions?
  sub_task_permissions    SubTaskPermissions?
  chat_module_permissions ChatModulePermissions?
  ai_permissions          AIPermissions?
  roleId                  String?                @unique
  Role                    Role?                  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  created_at              DateTime               @default(now())
  updated_at              DateTime               @updatedAt
}

model SalaryDetails {
  id               String       @id @default(uuid())
  effective_date   DateTime?
  salary_type      String?
  ctc_amount       Float?
  employer_pf      Float?
  employer_esi     Float?
  employer_lwf     Float?
  employee_pf      Float?
  employee_esi     Float?
  professional_tax Float?
  employee_lwf     Float?
  tds              Float?
  created_at       DateTime?    @default(now())
  updated_at       DateTime?    @updatedAt
  staffId          String
  earnings         Earnings[]
  deductions       Deductions[]
  Staff            StaffDetails @relation(fields: [staffId], references: [id])
}

model Shifts {
  id                   String          @id @default(dbgenerated("gen_random_uuid()"))
  shiftName            String
  shiftStartTime       String
  shiftEndTime         String
  punchInType          PunchTime       @default(ANYTIME)
  punchOutType         PunchTime       @default(ANYTIME)
  allowPunchInHours    Int?
  allowPunchInMinutes  Int?
  allowPunchOutMinutes Int?
  allowPunchOutHours   Int?
  // fixedShifts          FixedShift[]    @relation("ShiftFixedShift")
  flexibleShift        FlexibleShift[] @relation("ShiftFlexibleShift")
  Fine                 Fine[]
  Overtime             Overtime[]
  // Define many-to-many relationship with FixedShift
  fixedShifts          FixedShift[]    @relation("FixedShiftShifts")
}

enum PunchTime {
  ANYTIME
  ADDLIMIT
}

enum Day {
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
  Sun
}

model WeekOffShift {
  id         String      @id @default(dbgenerated("gen_random_uuid()"))
  weekOne    Boolean?    @default(false)
  weekTwo    Boolean?    @default(false)
  weekThree  Boolean?    @default(false)
  weekFour   Boolean?    @default(false)
  weekFive   Boolean?    @default(false)
  FixedShift FixedShift?
}

model FixedShift {
  id        String        @id @default(dbgenerated("gen_random_uuid()"))
  day       Day           @default(Mon)
  weekOff   Boolean       @default(false)
  staff     StaffDetails? @relation(fields: [staffId], references: [id], onDelete: Cascade)
  staffId   String?
  // shifts    Shifts[]      @relation("ShiftFixedShift")
  shiftsId  String
  weekId    String?       @unique
  week      WeekOffShift? @relation(fields: [weekId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  // Define many-to-many relationship with Shifts
  shifts    Shifts[]      @relation("FixedShiftShifts")
}

model FlexibleShift {
  id        String        @id @default(dbgenerated("gen_random_uuid()"))
  dateTime  String
  weekOff   Boolean       @default(false)
  staff     StaffDetails? @relation(fields: [staffId], references: [id], onDelete: Cascade)
  staffId   String?
  shifts    Shifts[]      @relation("ShiftFlexibleShift")
  createdAt DateTime      @default(now())
}

model PunchRecords {
  id         String            @id @default(dbgenerated("gen_random_uuid()"))
  punchDate  DateTime          @default(now())
  punchInId  String?           @unique
  punchIn    PunchIn?          @relation(fields: [punchInId], references: [id], onDelete: Cascade)
  punchOutId String?           @unique
  punchOut   PunchOut?         @relation(fields: [punchOutId], references: [id], onDelete: Cascade)
  staffId    String?
  staff      StaffDetails?     @relation(fields: [staffId], references: [id], onDelete: Cascade)
  status     punchRecordStatus @default(ABSENT)
  Fine       Fine[]
  Overtime   Overtime[]
}

enum punchRecordStatus {
  ABSENT
  PRESENT
  HALFDAY
  PAIDLEAVE
}

model Fine {
  id                    String        @id @default(dbgenerated("gen_random_uuid()"))
  lateEntryFineAmount   Float?        @default(1)
  lateEntryAmount       Float?        @default(0)
  excessBreakFineAmount Float?        @default(1)
  excessBreakAmount     Float?        @default(0)
  earlyOutFineAmount    Float?        @default(1)
  earlyOutAmount        Float?        @default(0)
  totalAmount           Float?        @default(0)
  shiftId               String?
  punchRecordId         String?       @unique
  shiftDetails          Shifts?       @relation(fields: [shiftId], references: [id], onDelete: Cascade)
  punchRecord           PunchRecords? @relation(fields: [punchRecordId], references: [id], onDelete: Cascade)
  staffId               String?
  staff                 StaffDetails? @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model Overtime {
  id                      String        @id @default(dbgenerated("gen_random_uuid()"))
  earlyCommingEntryAmount Float?        @default(1)
  earlyEntryAmount        Float?        @default(0)
  lateOutOvertimeAmount   Float?        @default(1)
  lateOutAmount           Float?        @default(0)
  totalAmount             Float?        @default(0)
  shiftIds                String?
  punchRecordId           String?
  shiftDetails            Shifts?       @relation(fields: [shiftIds], references: [id], onDelete: Cascade)
  punchRecord             PunchRecords? @relation(fields: [punchRecordId], references: [id], onDelete: Cascade)
  staffId                 String?
  staff                   StaffDetails? @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

enum PunchInMethod {
  BIOMETRIC
  QRSCAN
  PHOTOCLICK
}

model PunchIn {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  punchInMethod PunchInMethod @default(PHOTOCLICK)
  punchInTime   DateTime      @default(now())
  punchInDate   DateTime      @default(now())
  biometricData String?
  qrCodeValue   String?
  photoUrl      String?
  location      String
  fine          String?
  PunchRecords  PunchRecords?
  approve       String?       @default("Pending")
}

enum PunchOutMethod {
  BIOMETRIC
  QRSCAN
  PHOTOCLICK
}

model PunchOut {
  id             String         @id @default(dbgenerated("gen_random_uuid()"))
  punchOutMethod PunchOutMethod @default(PHOTOCLICK)
  punchOutTime   DateTime       @default(now())
  punchOutDate   DateTime       @default(now())
  biometricData  String?
  qrCodeValue    String?
  photoUrl       String?
  location       String
  overtime       String?
  punchRecords   PunchRecords?
}

enum BreakMethod {
  BIOMETRIC
  QRSCAN
  PHOTOCLICK
}

model StartBreak {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  breakMethod    BreakMethod  @default(PHOTOCLICK)
  startBreakTime DateTime     @default(now())
  biometricData  String?
  qrCodeValue    String?
  photoUrl       String?
  location       String
  staffId        String
  staff          StaffDetails @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model EndBreak {
  id            String       @id @default(dbgenerated("gen_random_uuid()"))
  breakMethod   BreakMethod  @default(PHOTOCLICK)
  endBreakTime  DateTime     @default(now())
  biometricData String?
  qrCodeValue   String?
  photoUrl      String?
  location      String
  staffId       String
  staff         StaffDetails @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model TaskStatus {
  id             String         @id @default(dbgenerated("gen_random_uuid()"))
  taskStatusName String
  statusColor    String
  statusOrder    Int            @default(0)
  isHiddenId     StaffDetails[] @relation("staffId")
  canBeChangedId String[]
}

model TaskPriority {
  id               String @id @default(dbgenerated("gen_random_uuid()"))
  taskPriorityName String
}

model TaskDetail {
  id                 String         @id @default(dbgenerated("gen_random_uuid()"))
  taskName           String
  taskStatusId       String
  taskPriorityId     String
  startDate          String
  endDate            String?
  dueDate            String?
  selectProjectId    Project[]      @relation("projectId")
  selectDepartmentId Department[]   @relation("departmentId")
  taskAssign         StaffDetails[] @relation("staffId")
  taskDescription    String
  taskTag            String?
  attachFile         String?
}

model ProjectFiles {
  id                  String   @id @default(dbgenerated("gen_random_uuid()"))
  file_name           String
  file_type           String
  last_activity       String?
  total_comments      String?
  visible_to_customer Boolean  @default(false)
  uploaded_by         String
  date_uploaded       DateTime
}

model Project {
  id              String         @id @default(uuid())
  project_name    String
  billing_type    String
  status          String
  total_rate      Int
  estimated_hours Int
  start_date      String
  deadline        String
  tags            String[]
  description     String
  send_mail       Boolean        @default(false)
  customerId      String?
  customerDetails ClientDetails? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  staffId         StaffDetails[] @relation("ProjectStaff")
  TaskDetail      TaskDetail[]   @relation("projectId")
}

model TicketInformation {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  subject        String
  contact        String
  name           String
  email          String
  department     String
  cc             String
  tags           String[]
  asign_ticket   String
  priority       String
  service        String
  project        String
  ticket_body    String
  insert_link    String
  personal_notes String
  insert_files   String
  staffIdd       String?
  staff          StaffDetails? @relation(fields: [staffIdd], references: [id], onDelete: Cascade)
}

model Discussion {
  id                  String @id @default(dbgenerated("gen_random_uuid()"))
  subject             String
  discription         String
  last_activity       String
  total_comments      String
  visible_to_customer String
}

model ClientDetails {
  id               String   @id @default(dbgenerated("gen_random_uuid()"))
  userId           String   @unique
  company          String
  vat_number       String   @unique
  website          String?
  groups           String[]
  currency         String[]
  default_language String[]
  address          String
  country          String
  state            String
  city             String
  status           Boolean  @default(false)
  zip_code         String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id])
  Project Project[]
}

model UpiDetails {
  UpiId   String       @id
  staffId String       @unique
  staff   StaffDetails @relation(fields: [staffId], references: [id])
}

model ProjectStatus {
  id             String   @id @default(uuid())
  project_name   String
  project_color  String
  project_order  String
  default_filter Boolean  @default(false)
  can_changed    String[]
}

model ProjectPriority {
  id             String   @id @default(uuid())
  Priority_name  String
  Priority_color String
  Priority_order String
  default_filter Boolean  @default(false)
  is_hidden      String[]
  can_changed    String[]
}

model Deductions {
  id              String         @id @default(dbgenerated("gen_random_uuid()"))
  heads           String?
  calculation     String?
  amount          Float?
  deduction_month String?
  staffId         String?
  staff           StaffDetails?  @relation(fields: [staffId], references: [id], onDelete: Cascade)
  salaryDetailsId String?
  SalaryDetails   SalaryDetails? @relation(fields: [salaryDetailsId], references: [id])
}

model Earnings {
  id              String         @id @default(dbgenerated("gen_random_uuid()"))
  heads           String?
  calculation     String?
  amount          Float?
  staffId         String?
  salary_month    String?
  staff           StaffDetails?  @relation(fields: [staffId], references: [id], onDelete: Cascade)
  SalaryDetails   SalaryDetails? @relation(fields: [salaryDetailsId], references: [id])
  salaryDetailsId String?
}
