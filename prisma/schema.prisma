generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Staff {
  id                      String                  @id @default(uuid())
  name                    String
  job_title               String
  branch                  String
  departmentId            Int
  roleId                  Int
  mobile                  String
  login_otp               String
  gender                  String
  official_email          String
  // date_of_joining         DateTime
  address                 String
  BankDetails             BankDetails[]
  panaltyOvertimeDetailId PanaltyOvertimeDetails?
  FixedShift   FixedShift[]
  FlexibleShift  FlexibleShift[]
  PunchIn     PunchIn[]
  PunchOut    PunchOut[]
}

model BankDetails {
  id             String   @id @default(uuid())
  staffId        String
  bank_name      String
  account_number String
  branch_name    String
  ifsc_code      String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  staff          Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model PanaltyOvertimeDetails {
  id      String @id @default(uuid())
  staffId String @unique

  earlyLeavePolicy EarlyLeavePolicy?
  lateComingPolicy LateComingPolicy?
  overtimePolicy   OvertimePolicy?

  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

enum FineType {
  HOURLY
  DAILY
}

model EarlyLeavePolicy {
  id              String   @id @default(uuid())
  fineType        FineType @default(HOURLY)
  gracePeriodMins Int
  fineAmountMins  Int
  waiveOffDays    Int

  panaltyOvertimeDetail   PanaltyOvertimeDetails? @relation(fields: [panaltyOvertimeDetailId], references: [id], onDelete: Cascade)
  panaltyOvertimeDetailId String?                 @unique
}

model LateComingPolicy {
  id              String   @id @default(uuid())
  fineType        FineType @default(HOURLY)
  gracePeriodMins Int
  fineAmountMins  Int
  waiveOffDays    Int

  panaltyOvertimeDetail   PanaltyOvertimeDetails? @relation(fields: [panaltyOvertimeDetailId], references: [id], onDelete: Cascade)
  panaltyOvertimeDetailId String?                 @unique
}

model OvertimePolicy {
  id               String @id @default(uuid())
  gracePeriodMins  Int
  extraHoursPay    Int
  publicHolidayPay Int
  weekOffPay       Int

  panaltyOvertimeDetail   PanaltyOvertimeDetails? @relation(fields: [panaltyOvertimeDetailId], references: [id], onDelete: Cascade)
  panaltyOvertimeDetailId String?                 @unique
}

model Role {
  id          String       @id @default(uuid())
  role_name   String       @unique
  permissions Permissions?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
}

model ClientsPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model ProjectsPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model ReportPermissions {
  id               String       @id @default(uuid())
  view_global      Boolean      @default(false)
  view_time_sheets Boolean      @default(false)
  Permissions      Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId    String?      @unique
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
}

model StaffRolePermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model SettingsPermissions {
  id               String       @id @default(uuid())
  view_global      Boolean      @default(false)
  view_time_sheets Boolean      @default(false)
  Permissions      Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId    String?      @unique
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
}

model StaffPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model TaskPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model SubTaskPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model ChatModulePermissions {
  id            String       @id @default(uuid())
  grant_access  Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model AIPermissions {
  id            String       @id @default(uuid())
  grant_access  Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model Permissions {
  id                      String                 @id @default(uuid())
  clients_permissions     ClientsPermissions?
  projects_permissions    ProjectsPermissions?
  report_permissions      ReportPermissions?
  staff_role_permissions  StaffRolePermissions?
  settings_permissions    SettingsPermissions?
  staff_permissions       StaffPermissions?
  task_permissions        TaskPermissions?
  sub_task_permissions    SubTaskPermissions?
  chat_module_permissions ChatModulePermissions?
  ai_permissions          AIPermissions?
  roleId                  String?                @unique
  Role                    Role?                  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  created_at              DateTime               @default(now())
  updated_at              DateTime           @updatedAt
}

model Shifts {
  id            String      @id @default(uuid())
  shiftName     String
  shiftStartTime  String
  shiftEndTime    String
  punchInTime   String
  punchOutTime   String
  punchInType  PunchTime @default(ANYTIME)
  punchOutType  PunchTime @default(ANYTIME)
  fixed  FixedShift   @relation(fields: [fixedId], references: [id], onDelete: Cascade)
  fixedId  String
  flexible  FlexibleShift   @relation(fields: [flexibleId], references: [id], onDelete: Cascade)
  flexibleId  String
}

enum PunchTime {
  ANYTIME
  ADDLIMIT
}

model FixedShift {
  id      String    @id  @default(uuid())
  day   String
  weekOff   Boolean
  staff   Staff?      @relation(fields: [staffId], references: [id], onDelete: Cascade)
  staffId   String?
  Shifts   Shifts[]
}

model FlexibleShift {
  id      String    @id  @default(uuid())
  day   String
  weekOff   Boolean
  staff   Staff      @relation(fields: [staffId], references: [id], onDelete: Cascade)
  staffId   String
  Shifts    Shifts[]
}

model PunchRecords {
  id      String  @id @default(uuid())
  punchDate   DateTime @default(now())
  punchInId  String @unique
  punchIn     PunchIn @relation(fields: [punchInId], references: [id], onDelete: Cascade)
  punchOutId     String @unique
  punchOut    PunchOut @relation(fields: [punchOutId], references: [id], onDelete: Cascade)
}

enum PunchInMethod {
  BIOMETRIC
  QRSCAN
  PHOTOCLICK
}

model PunchIn {
  id              String   @id @default(uuid())
  punchInMethod   PunchInMethod @default(PHOTOCLICK)
  punchInTime     DateTime @default(now())
  punchInDate     DateTime @default(now())
  biometricData   String?  // Store biometric signature, nullable
  qrCodeValue     String?  // Store QR scan result, nullable
  photoUrl        String?  // Store the URL of the photo taken, nullable
  PunchRecords           PunchRecords?
  staffId         String   // Foreign key to User table
  staff           Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

enum PunchOutMethod {
  BIOMETRIC
  QRSCAN
  PHOTOCLICK
}

model PunchOut {
  id              String   @id @default(uuid())
  punchOutMethod   PunchOutMethod @default(PHOTOCLICK)
  punchOutTime    DateTime  @default(now())
  punchOutDate    DateTime @default(now())
  biometricData   String?  // Store biometric signature, nullable
  qrCodeValue     String?  // Store QR scan result, nullable
  photoUrl        String?  // Store the URL of the photo taken, nullable
  PunchRecords           PunchRecords?
  staffId         String   // Foreign key to User table
  staff           Staff     @relation(fields: [staffId], references: [id], onDelete: Cascade)
}
