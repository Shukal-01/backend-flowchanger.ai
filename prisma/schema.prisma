generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id            String   @id @default(uuid())
  email         String   @unique
  first_name    String
  last_name     String
  mobile        String
  time_zone     String
  time_formate  String
  date_formate  String
  week_formate  String
  package_id    String
  company_name  String
  company_logo  String?
  profile_image String?
  password      String
  is_verified   Boolean  @default(false)
  otp           Int
  otpExpiresAt  DateTime
}

model Staff {
  id                         String    @id @default(uuid())
  name                       String
  job_title                  String?
  branch                     String?
  departmentId               String?
  roleId                     String?
  mobile                     String?
  login_otp                  String?
  gender                     String?
  official_email             String?
  date_of_joining            DateTime? @default(now())
  date_of_birth              DateTime? @default(now())
  current_address            String?
  permanent_address          String?
  emergency_contact_name     String?
  emergency_contact_mobile   String?
  emergency_contact_relation String?
  emergency_contact_address  String?

  department               Department?                  @relation(fields: [departmentId], references: [id])
  role                     Role?                        @relation(fields: [roleId], references: [id])
  verifications            Verification[]
  BankDetails              BankDetails[]
  LeavePolicy              LeavePolicy[]
  LeaveBalance             LeaveBalance[]
  LeaveRequest             LeaveRequest[]
  FixedShift               FixedShift[]
  FlexibleShift            FlexibleShift[]
  PunchIn                  PunchIn[]
  PunchOut                 PunchOut[]
  panaltyOvertimeDetailId  PanaltyOvertimeDetails?
  SalaryDetails            SalaryDetails[]
  PunchRecords             PunchRecords[]
  attendanceAutomationRule AttendanceAutomationRule?
  AttendenceMode           AttendanceMode?
  staff_bg_verification    StaffBackgroundVerification?
  CustomDetails            CustomDetails[]
  TicketInformation        TicketInformation[]
}

model Department {
  id              String  @id @default(uuid())
  department_name String
  staffs          Staff[]
}

model AttendanceAutomationRule {
  id                  String   @id @default(uuid())
  auto_absent         Boolean  @default(false)
  present_on_punch    Boolean  @default(false)
  auto_half_day       String?
  manadatory_half_day String?
  manadatory_full_day String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  staffId             String   @unique
  staff               Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model AttendanceMode {
  id                        String             @id @default(uuid())
  selfie_attendance         Boolean            @default(false)
  qr_attendance             Boolean            @default(false)
  gps_attendance            Boolean            @default(false)
  mark_attendance           MarkAttendenceType @default(Office)
  allow_punch_in_for_mobile Boolean            @default(false) // Allows punch-in from mobile devices
  created_at                DateTime           @default(now())
  updated_at                DateTime           @updatedAt
  staffId                   String             @unique
  staff                     Staff              @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

enum MarkAttendenceType {
  Office
  Anywhere
}

model StaffBackgroundVerification {
  id                          String   @id @default(uuid())
  aadhaar_number              String?
  aadhaar_verification_status String?  @default("Not Verified")
  aadhaar_file                String?
  pan_number                  String?
  pan_verification_status     String?  @default("Not Verified")
  pan_file                    String?
  uan_number                  String?
  uan_verification_status     String?  @default("Not Verified")
  uan_file                    String?
  driving_license_number      String?
  driving_license_status      String?  @default("Not Verified")
  driving_license_file        String?
  face_file                   String?
  face_verification_status    String?  @default("Not Verified")
  current_address             String?
  permanent_address           String?
  address_status              String?  @default("Not Verified")
  address_file                String?
  staff                       Staff?   @relation(fields: [staffId], references: [id])
  staffId                     String?  @unique
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

model BankDetails {
  id             String   @id @default(uuid())
  staffId        String
  bank_name      String?
  account_number String?
  branch_name    String?
  ifsc_code      String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  staff Staff @relation(fields: [staffId], references: [id])
}

model LeavePolicy {
  id                   String   @id @default(uuid())
  staffId              String
  name                 String
  allowed_leaves       Int      @default(0)
  carry_forward_leaves Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  staff        Staff          @relation(fields: [staffId], references: [id])
  LeaveBalance LeaveBalance[]
  LeaveRequest LeaveRequest[]
}

model LeaveBalance {
  id          String   @id @default(uuid())
  staffId     String
  leaveTypeId String
  balance     Int      @default(0)
  used        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  staff       Staff       @relation(fields: [staffId], references: [id])
  leavePolicy LeavePolicy @relation(fields: [leaveTypeId], references: [id])
}

model LeaveRequest {
  id           String   @id @default(uuid())
  staffId      String
  leaveTypeId  String
  request_date DateTime @default(now())
  start_date   DateTime
  end_date     DateTime
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  staff       Staff       @relation(fields: [staffId], references: [id])
  leavePolicy LeavePolicy @relation(fields: [leaveTypeId], references: [id])
}

model Verification {
  id          String             @id @default(uuid())
  staffId     String
  type        VerificationType
  status      VerificationStatus
  documentUrl String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model CustomDetails {
  id          String  @id @default(uuid())
  staffId     String?
  field_name  String
  field_value String
  staff       Staff?  @relation(fields: [staffId], references: [id])
}

enum VerificationType {
  AADHAAR
  PAN
  DRIVING_LICENSE
  UAN
  FACE
  ADDRESS
  PAST_EMPLOYMENT
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

model PanaltyOvertimeDetails {
  id      String @id @default(uuid())
  staffId String @unique

  earlyLeavePolicy EarlyLeavePolicy?
  lateComingPolicy LateComingPolicy?
  overtimePolicy   OvertimePolicy?

  staff Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

enum FineType {
  HOURLY
  DAILY
}

model EarlyLeavePolicy {
  id              String   @id @default(uuid())
  fineType        FineType @default(HOURLY)
  gracePeriodMins Int
  fineAmountMins  Int
  waiveOffDays    Int

  panaltyOvertimeDetail   PanaltyOvertimeDetails? @relation(fields: [panaltyOvertimeDetailId], references: [id], onDelete: Cascade)
  panaltyOvertimeDetailId String?                 @unique
}

model LateComingPolicy {
  id              String   @id @default(uuid())
  fineType        FineType @default(HOURLY)
  gracePeriodMins Int
  fineAmountMins  Int
  waiveOffDays    Int

  panaltyOvertimeDetail   PanaltyOvertimeDetails? @relation(fields: [panaltyOvertimeDetailId], references: [id], onDelete: Cascade)
  panaltyOvertimeDetailId String?                 @unique
}

model OvertimePolicy {
  id               String @id @default(uuid())
  gracePeriodMins  Int
  extraHoursPay    Int
  publicHolidayPay Int
  weekOffPay       Int

  panaltyOvertimeDetail   PanaltyOvertimeDetails? @relation(fields: [panaltyOvertimeDetailId], references: [id], onDelete: Cascade)
  panaltyOvertimeDetailId String?                 @unique
}

model Role {
  id          String       @id @default(uuid())
  role_name   String       @unique
  permissions Permissions?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  staffs      Staff[]
}

model ClientsPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model ProjectsPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model ReportPermissions {
  id               String       @id @default(uuid())
  view_global      Boolean      @default(false)
  view_time_sheets Boolean      @default(false)
  Permissions      Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId    String?      @unique
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
}

model StaffRolePermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model SettingsPermissions {
  id               String       @id @default(uuid())
  view_global      Boolean      @default(false)
  view_time_sheets Boolean      @default(false)
  Permissions      Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId    String?      @unique
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
}

model StaffPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model TaskPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model SubTaskPermissions {
  id            String       @id @default(uuid())
  view_global   Boolean      @default(false)
  create        Boolean      @default(false)
  edit          Boolean      @default(false)
  delete        Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model ChatModulePermissions {
  id            String       @id @default(uuid())
  grant_access  Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model AIPermissions {
  id            String       @id @default(uuid())
  grant_access  Boolean      @default(false)
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId String?      @unique
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model Permissions {
  id                      String                 @id @default(uuid())
  clients_permissions     ClientsPermissions?
  projects_permissions    ProjectsPermissions?
  report_permissions      ReportPermissions?
  staff_role_permissions  StaffRolePermissions?
  settings_permissions    SettingsPermissions?
  staff_permissions       StaffPermissions?
  task_permissions        TaskPermissions?
  sub_task_permissions    SubTaskPermissions?
  chat_module_permissions ChatModulePermissions?
  ai_permissions          AIPermissions?
  roleId                  String?                @unique
  Role                    Role?                  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  created_at              DateTime               @default(now())
  updated_at              DateTime               @updatedAt
}

model SalaryDetails {
  id                 String       @id @default(uuid())
  effective_date     DateTime?
  salary_type        String?
  ctc_amount         Float?
  basic              Float?
  hra                Float?
  dearness_allowance Float?
  employer_pf        Float?
  employer_esi       Float?
  employer_lwf       Float?
  employee_pf        Float?
  employee_esi       Float?
  professional_tax   Float?
  employee_lwf       Float?
  tds                Float?
  created_at         DateTime?    @default(now())
  updated_at         DateTime?    @updatedAt
  staffId            String
  Deductions         Deductions[]
  Staff              Staff        @relation(fields: [staffId], references: [id])
}

model Deductions {
  id            String         @id @default(uuid())
  salaryId      String?
  heads         String[]
  calculation   String[]
  amount        Float[]
  SalaryDetails SalaryDetails? @relation(fields: [salaryId], references: [id])
  updated_at    DateTime       @updatedAt
}

model Shifts {
  id             String        @id @default(uuid())
  shiftName      String
  shiftStartTime String
  shiftEndTime   String
  punchInTime    String
  punchOutTime   String
  punchInType    PunchTime     @default(ANYTIME)
  punchOutType   PunchTime     @default(ANYTIME)
  fixed          FixedShift    @relation(fields: [fixedId], references: [id], onDelete: Cascade)
  fixedId        String
  flexible       FlexibleShift @relation(fields: [flexibleId], references: [id], onDelete: Cascade)
  flexibleId     String
}

enum PunchTime {
  ANYTIME
  ADDLIMIT
}

model FixedShift {
  id      String   @id @default(uuid())
  day     String
  weekOff Boolean
  staff   Staff?   @relation(fields: [staffId], references: [id], onDelete: Cascade)
  staffId String?
  Shifts  Shifts[]
}

model FlexibleShift {
  id      String   @id @default(uuid())
  day     String
  weekOff Boolean
  staff   Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  staffId String
  Shifts  Shifts[]
}

model PunchRecords {
  id         String   @id @default(uuid())
  punchDate  DateTime @default(now())
  punchInId  String   @unique
  punchIn    PunchIn  @relation(fields: [punchInId], references: [id], onDelete: Cascade)
  punchOutId String   @unique
  punchOut   PunchOut @relation(fields: [punchOutId], references: [id], onDelete: Cascade)
  staffId    String?
  staff      Staff?   @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

enum PunchInMethod {
  BIOMETRIC
  QRSCAN
  PHOTOCLICK
}

model PunchIn {
  id            String        @id @default(uuid())
  punchInMethod PunchInMethod @default(PHOTOCLICK)
  punchInTime   DateTime      @default(now())
  punchInDate   DateTime      @default(now())
  biometricData String? // Store biometric signature, nullable
  qrCodeValue   String? // Store QR scan result, nullable
  photoUrl      String? // Store the URL of the photo taken, nullable
  PunchRecords  PunchRecords?
  staffId       String // Foreign key to User table
  staff         Staff         @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

enum PunchOutMethod {
  BIOMETRIC
  QRSCAN
  PHOTOCLICK
}

model PunchOut {
  id             String         @id @default(uuid())
  punchOutMethod PunchOutMethod @default(PHOTOCLICK)
  punchOutTime   DateTime       @default(now())
  punchOutDate   DateTime       @default(now())
  biometricData  String? // Store biometric signature, nullable
  qrCodeValue    String? // Store QR scan result, nullable
  photoUrl       String? // Store the URL of the photo taken, nullable
  PunchRecords   PunchRecords?
  staffId        String // Foreign key to User table
  staff          Staff          @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

// model TaskType {
//   id           String       @id @default(uuid())
//   taskTypeName String
//   TaskDetail   TaskDetail[]
// }

model TaskStatus {
  id             String       @id @default(uuid())
  taskStatusName String
  TaskDetail     TaskDetail[]
  statusColor    String
  statusOrder    Int
  isHiddenId     String
  canBeChangedId String
}

model TaskPriority {
  id               String       @id @default(uuid())
  taskPriorityName String
  TaskDetail       TaskDetail[]
}

model TaskDetail {
  id               String       @id @default(uuid())
  taskName         String
  taskStatusId     String
  taskTypeId       String
  taskPriorityId   String
  taskPriority     TaskPriority @relation(fields: [taskPriorityId], references: [id], onDelete: Cascade)
  // taskType         TaskType     @relation(fields: [taskTypeId], references: [id], onDelete: Cascade)
  taskStatus       TaskStatus   @relation(fields: [taskStatusId], references: [id], onDelete: Cascade)
  startDate        String
  endDate          String
  dueDate          String
  selectProject    String
  selectDepartment String
  taskAssign       String
  taskDescription  String
  attachFile       String
}

model ProjectFiles {
  id                  String   @id @default(uuid())
  file_name           String
  file_type           String
  last_activity       String?
  total_comments      String?
  visible_to_customer Boolean  @default(false)
  uploaded_by         String
  date_uploaded       DateTime
  projectId           String
  project_files       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Project {
  id                String              @id @default(uuid())
  project_name      String
  customer          String
  billing_type      String
  status            String
  total_rate        Int
  estimated_hours   Int
  start_Date        String
  department        String
  deadline          String
  tags              String[]
  description       String
  clientId          String
  client            Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  projectFiles      ProjectFiles[]
  discussion        Discussion[]
  ticketInformation TicketInformation[]
}

model TicketInformation {
  id                String   @id @default(uuid())
  subject           String
  contact           String
  name              String
  email             String
  department        String
  cc                String
  tags              String[]
  asign_ticket      String
  priority          String
  service           String
  project           String
  ticket_body       String
  insert_link       String
  personal_notes    String
  insert_files      String
  ticketInformation Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId         String?
  staffIdd          String?
  staff             Staff?   @relation(fields: [staffIdd], references: [id], onDelete: Cascade)
}

model Discussion {
  id                  String   @id @default(uuid())
  subject             String
  discription         String
  last_activity       String
  total_comments      String
  visible_to_customer String
  discussion          Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId           String?
}

model Client {
  id               String     @id @default(uuid())
  company          String
  vat_number       String     @unique
  phone            String
  website          String?
  groups           String[]
  currency         String[]
  default_language String[]
  address          String
  country          String
  state            String
  city             String
  status           StatusType @default(inactive)
  zip_code         String
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  Project          Project[]
}

enum StatusType {
  active
  inactive
}
